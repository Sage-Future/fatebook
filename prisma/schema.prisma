generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Forecast {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  comment    String?
  forecast   Decimal
  authorId   Int
  questionId Int
  profile    Profile  @relation(fields: [authorId], references: [id], onDelete: Cascade)
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  scored     Boolean  @default(false)
  score      Int?
}

model QuestionScore {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  score      Int
  profileId  Int
  questionId Int
  profile    Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  profileQuestionComboId Int @unique
}

model Question {
  id                  Int             @id @default(autoincrement())
  createdAt           DateTime        @default(now())
  comment             String?
  authorId            Int
  title               String          @db.VarChar(255)
  forecasts           Forecast[]
  resolve_by          DateTime
  resolved_at         DateTime?
  resolved            Boolean         @default(false)
  profile             Profile         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  groups              Group[]
  resolution          Resolution?
  pingedForResolution Boolean         @default(false)
  questionScores      QuestionScore[]
}

model User {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  email     String    @unique
  name      String?
  imageUrl  String?
  profiles  Profile[]
}

model Profile {
  id             Int             @id @default(autoincrement())
  createdAt      DateTime        @default(now())
  groups         Group[]
  slackId        String?
  userId         Int             @unique
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  forecasts      Forecast[]
  questions      Question[]
  questionScores QuestionScore[]
}

model Group {
  id          Int        @id @default(autoincrement())
  type        GroupType
  createdAt   DateTime   @default(now())
  name        String     @db.VarChar(255)
  slackTeamId String?
  questions   Question[]
  profiles    Profile[]
}

enum GroupType {
  WEB
  SLACK
}

enum Resolution {
  YES
  NO
  AMBIGUOUS
}
