generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Workspace {
  teamId    String   @id @unique
  teamName  String
  token     String
  createdAt DateTime @default(now())
}

model Forecast {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  comment    String?
  forecast   Decimal
  authorId   Int
  questionId Int
  profile    Profile  @relation(fields: [authorId], references: [id], onDelete: Cascade)
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model QuestionScore {
  id                     Int      @id @default(autoincrement())
  createdAt              DateTime @default(now())
  relativeScore          Decimal
  profileId              Int
  questionId             Int
  profileQuestionComboId Int      @unique
  absoluteScore          Decimal
  rank                   Int
  profile                Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  question               Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model Question {
  id                  Int                      @id @default(autoincrement())
  createdAt           DateTime                 @default(now())
  comment             String?
  authorId            Int
  title               String                   @db.VarChar(255)
  resolveBy           DateTime
  resolved            Boolean                  @default(false)
  pingedForResolution Boolean                  @default(false)
  resolution          Resolution?
  resolvedAt          DateTime?
  notes               String?
  hideForecastsUntil  DateTime?
  forecasts           Forecast[]
  pingResolveMessages PingSlackMessage[]
  profile             Profile                  @relation(fields: [authorId], references: [id], onDelete: Cascade)
  questionScores      QuestionScore[]
  questionMessages    QuestionSlackMessage[]
  resolutionMessages  ResolutionSlackMessage[]
  groups              Group[]                  @relation("GroupToQuestion")
}

model ResolutionSlackMessage {
  id         Int          @id @default(autoincrement())
  questionId Int
  detailsId  Int          @unique
  message    SlackMessage @relation(fields: [detailsId], references: [id], onDelete: Cascade)
  question   Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model PingSlackMessage {
  id         Int          @id @default(autoincrement())
  questionId Int
  detailsId  Int          @unique
  message    SlackMessage @relation(fields: [detailsId], references: [id], onDelete: Cascade)
  question   Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model QuestionSlackMessage {
  id         Int          @id @default(autoincrement())
  updatedAt  DateTime     @default(now())
  questionId Int
  detailsId  Int          @unique
  message    SlackMessage @relation(fields: [detailsId], references: [id], onDelete: Cascade)
  question   Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model SlackMessage {
  id                     Int                     @id @default(autoincrement())
  ts                     String
  channel                String
  teamId                 String
  pingSlackMessage       PingSlackMessage?
  questionSlackMessage   QuestionSlackMessage?
  resolutionSlackMessage ResolutionSlackMessage?
}

model User {
  id        Int       @id @default(autoincrement())
  name      String?
  createdAt DateTime  @default(now())
  email     String    @unique
  image     String?
  profiles  Profile[]

  // Used by next-auth:
  emailVerified DateTime?
  accounts  Account[]
}

model Profile {
  id             Int             @id @default(autoincrement())
  createdAt      DateTime        @default(now())
  slackId        String?
  userId         Int
  forecasts      Forecast[]
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  questions      Question[]
  questionScores QuestionScore[]
  groups         Group[]         @relation("GroupToProfile")
}

model Group {
  id          Int        @id @default(autoincrement())
  type        GroupType
  createdAt   DateTime   @default(now())
  name        String     @db.VarChar(255)
  slackTeamId String?
  profiles    Profile[]  @relation("GroupToProfile")
  questions   Question[] @relation("GroupToQuestion")
}

enum GroupType {
  WEB
  SLACK
}

enum Resolution {
  YES
  NO
  AMBIGUOUS
}

// OAuth account, e.g. google - used by next-auth for web
model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}
