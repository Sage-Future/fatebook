generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_DIRECT_URL")
}

enum QuestionType {
  BINARY
  MULTIPLE_CHOICE
  QUANTITY
}

model Workspace {
  teamId    String   @id @unique
  teamName  String
  token     String
  createdAt DateTime @default(now())
}

model Forecast {
  id         Int             @id @default(autoincrement())
  createdAt  DateTime        @default(now())
  comment    String?
  forecast   Decimal
  profileId  Int?
  questionId String
  optionId   String?
  option     QuestionOption? @relation(fields: [optionId], references: [id], onDelete: Cascade)
  userId     String
  profile    Profile?        @relation(fields: [profileId], references: [id], onDelete: Cascade, map: "Forecast_authorId_fkey")
  question   Question        @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user       User            @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model QuestionScore {
  id                  Int      @id @default(autoincrement())
  createdAt           DateTime @default(now())
  relativeScore       Decimal?
  questionId          String
  userQuestionComboId String   @unique
  absoluteScore       Decimal
  rank                Int
  userId              String
  question            Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model QuestionOption {
  id         String      @id @default(cuid())
  questionId String
  text       String
  question   Question    @relation(fields: [questionId], references: [id], onDelete: Cascade)
  forecasts  Forecast[]
  resolution Resolution?
  createdAt  DateTime?   @default(now())
  user       User        @relation("author", fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  resolvedAt DateTime?
}

model Question {
  id                           String                   @id @default(cuid())
  createdAt                    DateTime                 @default(now())
  comment                      String? // todo remove, unused
  profileId                    Int?
  title                        String                   @db.Text
  type                         QuestionType             @default(BINARY)
  options                      QuestionOption[]
  resolveBy                    DateTime
  resolved                     Boolean                  @default(false)
  pingedForResolution          Boolean                  @default(false)
  resolution                   Resolution?
  resolvedAt                   DateTime?
  notes                        String?
  hideForecastsUntil           DateTime?
  hideForecastsUntilPrediction Boolean?                 @default(false)
  userId                       String
  forecasts                    Forecast[]
  pingResolveMessages          PingSlackMessage[]
  profile                      Profile?                 @relation(fields: [profileId], references: [id], onDelete: Cascade, map: "Question_authorId_fkey")
  user                         User                     @relation("author", fields: [userId], references: [id], onDelete: Cascade)
  sharedWith                   User[]                   @relation("questionsSharedWith")
  sharedWithLists              UserList[]
  sharedPublicly               Boolean                  @default(false)
  unlisted                     Boolean                  @default(true)
  questionScores               QuestionScore[]
  questionMessages             QuestionSlackMessage[]
  resolutionMessages           ResolutionSlackMessage[]
  comments                     Comment[]
  tags                         Tag[]
  tournaments                  Tournament[]
}

model Tag {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  name      String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  questions Question[]
  userId    String

  @@unique([name, userId])
}

model ResolutionSlackMessage {
  id         Int          @id @default(autoincrement())
  questionId String
  detailsId  Int          @unique
  profileId  Int?
  message    SlackMessage @relation(fields: [detailsId], references: [id], onDelete: Cascade)
  profile    Profile?     @relation(fields: [profileId], references: [id])
  question   Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model PingSlackMessage {
  id         Int          @id @default(autoincrement())
  questionId String
  detailsId  Int          @unique
  message    SlackMessage @relation(fields: [detailsId], references: [id], onDelete: Cascade)
  question   Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model QuestionSlackMessage {
  id         Int          @id @default(autoincrement())
  questionId String
  detailsId  Int          @unique
  updatedAt  DateTime     @default(now())
  message    SlackMessage @relation(fields: [detailsId], references: [id], onDelete: Cascade)
  question   Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model SlackMessage {
  id                     Int                     @id @default(autoincrement())
  ts                     String
  channel                String
  teamId                 String
  pingSlackMessage       PingSlackMessage?
  questionSlackMessage   QuestionSlackMessage?
  resolutionSlackMessage ResolutionSlackMessage?
}

model User {
  id                       String           @id @default(cuid())
  name                     String?
  createdAt                DateTime         @default(now())
  email                    String           @unique
  image                    String?
  forecasts                Forecast[]
  profiles                 Profile[]
  questions                Question[]       @relation("author")
  questionScores           QuestionScore[]
  questionsSharedWith      Question[]       @relation("questionsSharedWith")
  comments                 Comment[]
  target                   Target?          @relation("userTarget")
  authorOfLists            UserList[]       @relation(name: "author")
  memberOfLists            UserList[]       @relation(name: "members")
  staleReminder            Boolean          @default(true)
  unsubscribedFromEmailsAt DateTime?
  apiKey                   String?
  discordUserId            String?          @unique
  tags                     Tag[]
  tournaments              Tournament[]
  notifications            Notification[]
  questionOptions          QuestionOption[] @relation("author")

  // Used by next-auth:
  emailVerified DateTime?
  accounts      Account[]
}

model Profile {
  id                 Int                      @id @default(autoincrement())
  createdAt          DateTime                 @default(now())
  slackId            String?
  slackTeamId        String?
  userId             String
  forecasts          Forecast[]
  user               User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  questions          Question[]
  resolutionMessages ResolutionSlackMessage[]
  target             Target?                  @relation("profileTarget")
}

model Group {
  id          Int       @id @default(autoincrement())
  type        GroupType
  createdAt   DateTime  @default(now())
  name        String    @db.VarChar(255)
  slackTeamId String?
}

model Target {
  id           Int          @id @default(autoincrement())
  user         User         @relation("userTarget", onDelete: Cascade, fields: [userId], references: [id])
  userId       String       @unique
  profile      Profile?     @relation("profileTarget", fields: [profileId], references: [id], onDelete: Cascade)
  profileId    Int?         @unique
  type         TargetType
  goal         Int
  lastFailedAt DateTime     @default(now())
  notifyOn     DayOfTheWeek
  lastNotified DateTime     @default(now())
}

enum DayOfTheWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum TargetType {
  FORECAST
  QUESTION
}

enum GroupType {
  WEB
  SLACK
}

enum Resolution {
  YES
  NO
  AMBIGUOUS
}

// OAuth account, e.g. google - used by next-auth for web
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Comment {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  comment    String
  questionId String
  userId     String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserList {
  id                   String       @id @default(cuid())
  createdAt            DateTime     @default(now())
  inviteId             String?      @unique @default(cuid())
  name                 String
  emailDomains         String[]
  syncToSlackTeamId    String?
  syncToSlackChannelId String?
  authorId             String
  author               User         @relation(name: "author", fields: [authorId], references: [id], onDelete: Cascade)
  users                User[]       @relation(name: "members")
  questions            Question[]
  tournaments          Tournament[]
}

model Tournament {
  id                   String     @id @default(cuid())
  createdAt            DateTime   @default(now())
  name                 String
  description          String?
  questions            Question[]
  authorId             String
  author               User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  sharedPublicly       Boolean    @default(false)
  unlisted             Boolean    @default(true)
  userList             UserList?  @relation(fields: [userListId], references: [id], onDelete: Cascade)
  userListId           String?
  anyoneInListCanEdit  Boolean    @default(false)
  showLeaderboard      Boolean    @default(true)
  predictYourYear      Int?
  syncToSlackTeamId    String?
  syncToSlackChannelId String?
}

model Notification {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  emailSentAt DateTime?
  title       String
  content     String
  url         String?
  tags        String[]
  read        Boolean   @default(false)
  userId      String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Feedback {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  type      String
  message   String
  email     String?
  userId    String?
}
