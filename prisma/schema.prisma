generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Workspace {
  teamId    String   @id @unique
  teamName  String
  token     String
  createdAt DateTime @default(now())
}

model Forecast {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  comment    String?
  forecast   Decimal
  profileId  Int?
  questionId Int
  userId     Int
  profile    Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade, map: "Forecast_authorId_fkey")
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model QuestionScore {
  id                     Int      @id @default(autoincrement())
  createdAt              DateTime @default(now())
  relativeScore          Decimal?
  questionId             Int
  userQuestionComboId    String   @unique
  absoluteScore          Decimal
  rank                   Int
  userId                 Int
  question               Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Question {
  id                  Int                      @id @default(autoincrement())
  createdAt           DateTime                 @default(now())
  comment             String?
  profileId           Int?
  title               String                   @db.VarChar(255)
  resolveBy           DateTime
  resolved            Boolean                  @default(false)
  pingedForResolution Boolean                  @default(false)
  resolution          Resolution?
  resolvedAt          DateTime?
  notes               String?
  hideForecastsUntil  DateTime?
  userId              Int
  forecasts           Forecast[]
  pingResolveMessages PingSlackMessage[]
  profile             Profile?                  @relation(fields: [profileId], references: [id], onDelete: Cascade, map: "Question_authorId_fkey")
  user                User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  questionScores      QuestionScore[]
  questionMessages    QuestionSlackMessage[]
  resolutionMessages  ResolutionSlackMessage[]
}

model ResolutionSlackMessage {
  id         Int          @id @default(autoincrement())
  questionId Int
  detailsId  Int          @unique
  profileId  Int?
  message    SlackMessage @relation(fields: [detailsId], references: [id], onDelete: Cascade)
  profile    Profile?     @relation(fields: [profileId], references: [id])
  question   Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model PingSlackMessage {
  id         Int          @id @default(autoincrement())
  questionId Int
  detailsId  Int          @unique
  message    SlackMessage @relation(fields: [detailsId], references: [id], onDelete: Cascade)
  question   Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model QuestionSlackMessage {
  id         Int          @id @default(autoincrement())
  questionId Int
  detailsId  Int          @unique
  updatedAt  DateTime     @default(now())
  message    SlackMessage @relation(fields: [detailsId], references: [id], onDelete: Cascade)
  question   Question     @relation(fields: [questionId], references: [id], onDelete: Cascade)
}

model SlackMessage {
  id                     Int                     @id @default(autoincrement())
  ts                     String
  channel                String
  teamId                 String
  pingSlackMessage       PingSlackMessage?
  questionSlackMessage   QuestionSlackMessage?
  resolutionSlackMessage ResolutionSlackMessage?
}

model User {
  id             Int             @id @default(autoincrement())
  name           String?
  createdAt      DateTime        @default(now())
  email          String          @unique
  image          String?
  forecasts      Forecast[]
  profiles       Profile[]
  questions      Question[]

  // Used by next-auth:
  emailVerified DateTime?
  accounts      Account[]

  questionScores QuestionScore[]
}

model Profile {
  id                 Int                      @id @default(autoincrement())
  createdAt          DateTime                 @default(now())
  slackId            String?
  slackTeamId        String?
  userId             Int
  forecasts          Forecast[]
  user               User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  questions          Question[]
  resolutionMessages ResolutionSlackMessage[]
}

model Group {
  id          Int        @id @default(autoincrement())
  type        GroupType
  createdAt   DateTime   @default(now())
  name        String     @db.VarChar(255)
  slackTeamId String?
}

enum GroupType {
  WEB
  SLACK
}

enum Resolution {
  YES
  NO
  AMBIGUOUS
}

// OAuth account, e.g. google - used by next-auth for web
model Account {
  id                String  @id @default(cuid())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}
